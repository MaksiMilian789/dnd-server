// <auto-generated />
using System;
using System.Collections.Generic;
using DndServer.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DndServer.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240520080725_imagebyte")]
    partial class imagebyte
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BackgroundInstanceSkillInstance", b =>
                {
                    b.Property<int>("BackgroundInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("SkillInstanceId")
                        .HasColumnType("int");

                    b.HasKey("BackgroundInstanceId", "SkillInstanceId");

                    b.HasIndex("SkillInstanceId");

                    b.ToTable("BackgroundInstanceSkillInstance");
                });

            modelBuilder.Entity("BackgroundTemplateSkillTemplate", b =>
                {
                    b.Property<int>("BackgroundTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("SkillTemplateId")
                        .HasColumnType("int");

                    b.HasKey("BackgroundTemplateId", "SkillTemplateId");

                    b.HasIndex("SkillTemplateId");

                    b.ToTable("BackgroundTemplateSkillTemplate");
                });

            modelBuilder.Entity("CharacterConditions", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionsId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "ConditionsId");

                    b.HasIndex("ConditionsId");

                    b.ToTable("CharacterConditions");
                });

            modelBuilder.Entity("CharacterNote", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("CharacterNote");
                });

            modelBuilder.Entity("CharacterObjectInstance", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectInstanceId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "ObjectInstanceId");

                    b.HasIndex("ObjectInstanceId");

                    b.ToTable("CharacterObjectInstance");
                });

            modelBuilder.Entity("CharacterSkillInstance", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SkillInstanceId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SkillInstanceId");

                    b.HasIndex("SkillInstanceId");

                    b.ToTable("CharacterSkillInstance");
                });

            modelBuilder.Entity("CharacterSpellInstance", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SpellInstanceId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SpellInstanceId");

                    b.HasIndex("SpellInstanceId");

                    b.ToTable("CharacterSpellInstance");
                });

            modelBuilder.Entity("ClassInstanceSkillInstance", b =>
                {
                    b.Property<int>("ClassInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("SkillInstanceId")
                        .HasColumnType("int");

                    b.HasKey("ClassInstanceId", "SkillInstanceId");

                    b.HasIndex("SkillInstanceId");

                    b.ToTable("ClassInstanceSkillInstance");
                });

            modelBuilder.Entity("ClassTemplateSkillTemplate", b =>
                {
                    b.Property<int>("ClassTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("SkillTemplateId")
                        .HasColumnType("int");

                    b.HasKey("ClassTemplateId", "SkillTemplateId");

                    b.HasIndex("SkillTemplateId");

                    b.ToTable("ClassTemplateSkillTemplate");
                });

            modelBuilder.Entity("ConditionsSkillTemplate", b =>
                {
                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<int>("SkillTemplateId")
                        .HasColumnType("int");

                    b.HasKey("ConditionId", "SkillTemplateId");

                    b.HasIndex("SkillTemplateId");

                    b.ToTable("ConditionsSkillTemplate");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Background.BackgroundInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BackgroundInstance");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Background.BackgroundTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.Property<int?>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BackgroundTemplate");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddHp")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BackgroundInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("ClassInstanceId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EnergySlots")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<int>("Ideology")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttachments")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RaceInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("SpellSlots")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Characteristics", "DndServer.Domain.Characters.Character.Characteristics#Characteristics", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Charisma")
                                .HasColumnType("int");

                            b1.Property<int>("Constitution")
                                .HasColumnType("int");

                            b1.Property<int>("Dexterity")
                                .HasColumnType("int");

                            b1.Property<int>("Intelligence")
                                .HasColumnType("int");

                            b1.Property<int>("Strength")
                                .HasColumnType("int");

                            b1.Property<int>("Wisdom")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("BackgroundInstanceId");

                    b.HasIndex("ClassInstanceId");

                    b.HasIndex("ImageId");

                    b.HasIndex("RaceInstanceId");

                    b.HasIndex("UserId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Class.ClassInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClassInstance");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Class.ClassTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.Property<int?>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClassTemplate");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Condition.Conditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.Property<int?>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Inventory.ObjectInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Attachment")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AttackType")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Distance")
                        .HasColumnType("int");

                    b.Property<bool>("Equipped")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("MainCharacteristic")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rare")
                        .HasColumnType("int");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Damage", "DndServer.Domain.Characters.Inventory.ObjectInstance.Damage#Damage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("DamageType")
                                .HasColumnType("int");

                            b1.Property<int>("Flat")
                                .HasColumnType("int");

                            b1.Property<bool>("Heal")
                                .HasColumnType("tinyint(1)");

                            b1.ComplexProperty<Dictionary<string, object>>("DamageRoll", "DndServer.Domain.Characters.Inventory.ObjectInstance.Damage#Damage.DamageRoll#DiceRolls", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int>("Dice")
                                        .HasColumnType("int");

                                    b2.Property<int>("Rolls")
                                        .HasColumnType("int");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("ObjectInstance");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Inventory.ObjectTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Attachment")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AttackType")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Distance")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("MainCharacteristic")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rare")
                        .HasColumnType("int");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("WorldId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Damage", "DndServer.Domain.Characters.Inventory.ObjectTemplate.Damage#Damage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("DamageType")
                                .HasColumnType("int");

                            b1.Property<int>("Flat")
                                .HasColumnType("int");

                            b1.Property<bool>("Heal")
                                .HasColumnType("tinyint(1)");

                            b1.ComplexProperty<Dictionary<string, object>>("DamageRoll", "DndServer.Domain.Characters.Inventory.ObjectTemplate.Damage#Damage.DamageRoll#DiceRolls", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int>("Dice")
                                        .HasColumnType("int");

                                    b2.Property<int>("Rolls")
                                        .HasColumnType("int");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("ObjectTemplate");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Notes.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Race.RaceInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RaceInstance");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Race.RaceTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.Property<int?>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RaceTemplate");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Skill.SkillInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<bool>("Activated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<int>("CurrentCharges")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Distance")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Passive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Recharge")
                        .HasColumnType("int");

                    b.Property<int>("SkillType")
                        .HasColumnType("int");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("ActionTime", "DndServer.Domain.Characters.Skill.SkillInstance.ActionTime#ActionTime", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Concentrate")
                                .HasColumnType("tinyint(1)");

                            b1.Property<int>("Time")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Value", "DndServer.Domain.Characters.Skill.SkillInstance.Value#SkillValue", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("ItemType")
                                .HasColumnType("int");

                            b1.Property<int>("Language")
                                .HasColumnType("int");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<string>("UseSpell")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.ComplexProperty<Dictionary<string, object>>("AttackBonus", "DndServer.Domain.Characters.Skill.SkillInstance.Value#SkillValue.AttackBonus#AttackBonus", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int>("AccuracyBonus")
                                        .HasColumnType("int");

                                    b2.Property<bool>("Advantage")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("DisAdvantage")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<int>("Type")
                                        .HasColumnType("int");

                                    b2.ComplexProperty<Dictionary<string, object>>("Damage", "DndServer.Domain.Characters.Skill.SkillInstance.Value#SkillValue.AttackBonus#AttackBonus.Damage#Damage", b3 =>
                                        {
                                            b3.IsRequired();

                                            b3.Property<int>("DamageType")
                                                .HasColumnType("int");

                                            b3.Property<int>("Flat")
                                                .HasColumnType("int");

                                            b3.Property<bool>("Heal")
                                                .HasColumnType("tinyint(1)");

                                            b3.ComplexProperty<Dictionary<string, object>>("DamageRoll", "DndServer.Domain.Characters.Skill.SkillInstance.Value#SkillValue.AttackBonus#AttackBonus.Damage#Damage.DamageRoll#DiceRolls", b4 =>
                                                {
                                                    b4.IsRequired();

                                                    b4.Property<int>("Dice")
                                                        .HasColumnType("int");

                                                    b4.Property<int>("Rolls")
                                                        .HasColumnType("int");
                                                });
                                        });
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("Damage", "DndServer.Domain.Characters.Skill.SkillInstance.Value#SkillValue.Damage#Damage", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int>("DamageType")
                                        .HasColumnType("int");

                                    b2.Property<int>("Flat")
                                        .HasColumnType("int");

                                    b2.Property<bool>("Heal")
                                        .HasColumnType("tinyint(1)");

                                    b2.ComplexProperty<Dictionary<string, object>>("DamageRoll", "DndServer.Domain.Characters.Skill.SkillInstance.Value#SkillValue.Damage#Damage.DamageRoll#DiceRolls", b3 =>
                                        {
                                            b3.IsRequired();

                                            b3.Property<int>("Dice")
                                                .HasColumnType("int");

                                            b3.Property<int>("Rolls")
                                                .HasColumnType("int");
                                        });
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("Effect", "DndServer.Domain.Characters.Skill.SkillInstance.Value#SkillValue.Effect#Effect", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<bool>("Advantage")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("Competent")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("DisAdvantage")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<int>("Dynamic")
                                        .HasColumnType("int");

                                    b2.Property<int>("Flat")
                                        .HasColumnType("int");

                                    b2.Property<bool>("Mastery")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("SaveRoll")
                                        .HasColumnType("tinyint(1)");
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("PerLevel", "DndServer.Domain.Characters.Skill.SkillInstance.Value#SkillValue.PerLevel#PerLevel", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int>("Dynamic")
                                        .HasColumnType("int");

                                    b2.Property<int>("Flat")
                                        .HasColumnType("int");
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("Resistance", "DndServer.Domain.Characters.Skill.SkillInstance.Value#SkillValue.Resistance#Resistance", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int?>("Flat")
                                        .HasColumnType("int");

                                    b2.ComplexProperty<Dictionary<string, object>>("DamageType", "DndServer.Domain.Characters.Skill.SkillInstance.Value#SkillValue.Resistance#Resistance.DamageType#DamageTypeEnum", b3 =>
                                        {
                                            b3.Property<int>("value__")
                                                .HasColumnType("int");
                                        });
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("TypeVision", "DndServer.Domain.Characters.Skill.SkillInstance.Value#SkillValue.TypeVision#TypeVision", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("longtext");
                                });
                        });

                    b.HasKey("Id");

                    b.ToTable("SkillInstance");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Skill.SkillTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Distance")
                        .HasColumnType("int");

                    b.Property<bool>("Hidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Passive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Recharge")
                        .HasColumnType("int");

                    b.Property<int>("SkillType")
                        .HasColumnType("int");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.Property<int?>("WorldId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("ActionTime", "DndServer.Domain.Characters.Skill.SkillTemplate.ActionTime#ActionTime", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Concentrate")
                                .HasColumnType("tinyint(1)");

                            b1.Property<int>("Time")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Value", "DndServer.Domain.Characters.Skill.SkillTemplate.Value#SkillValue", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("ItemType")
                                .HasColumnType("int");

                            b1.Property<int>("Language")
                                .HasColumnType("int");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<string>("UseSpell")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.ComplexProperty<Dictionary<string, object>>("AttackBonus", "DndServer.Domain.Characters.Skill.SkillTemplate.Value#SkillValue.AttackBonus#AttackBonus", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int>("AccuracyBonus")
                                        .HasColumnType("int");

                                    b2.Property<bool>("Advantage")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("DisAdvantage")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<int>("Type")
                                        .HasColumnType("int");

                                    b2.ComplexProperty<Dictionary<string, object>>("Damage", "DndServer.Domain.Characters.Skill.SkillTemplate.Value#SkillValue.AttackBonus#AttackBonus.Damage#Damage", b3 =>
                                        {
                                            b3.IsRequired();

                                            b3.Property<int>("DamageType")
                                                .HasColumnType("int");

                                            b3.Property<int>("Flat")
                                                .HasColumnType("int");

                                            b3.Property<bool>("Heal")
                                                .HasColumnType("tinyint(1)");

                                            b3.ComplexProperty<Dictionary<string, object>>("DamageRoll", "DndServer.Domain.Characters.Skill.SkillTemplate.Value#SkillValue.AttackBonus#AttackBonus.Damage#Damage.DamageRoll#DiceRolls", b4 =>
                                                {
                                                    b4.IsRequired();

                                                    b4.Property<int>("Dice")
                                                        .HasColumnType("int");

                                                    b4.Property<int>("Rolls")
                                                        .HasColumnType("int");
                                                });
                                        });
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("Damage", "DndServer.Domain.Characters.Skill.SkillTemplate.Value#SkillValue.Damage#Damage", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int>("DamageType")
                                        .HasColumnType("int");

                                    b2.Property<int>("Flat")
                                        .HasColumnType("int");

                                    b2.Property<bool>("Heal")
                                        .HasColumnType("tinyint(1)");

                                    b2.ComplexProperty<Dictionary<string, object>>("DamageRoll", "DndServer.Domain.Characters.Skill.SkillTemplate.Value#SkillValue.Damage#Damage.DamageRoll#DiceRolls", b3 =>
                                        {
                                            b3.IsRequired();

                                            b3.Property<int>("Dice")
                                                .HasColumnType("int");

                                            b3.Property<int>("Rolls")
                                                .HasColumnType("int");
                                        });
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("Effect", "DndServer.Domain.Characters.Skill.SkillTemplate.Value#SkillValue.Effect#Effect", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<bool>("Advantage")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("Competent")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("DisAdvantage")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<int>("Dynamic")
                                        .HasColumnType("int");

                                    b2.Property<int>("Flat")
                                        .HasColumnType("int");

                                    b2.Property<bool>("Mastery")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<bool>("SaveRoll")
                                        .HasColumnType("tinyint(1)");
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("PerLevel", "DndServer.Domain.Characters.Skill.SkillTemplate.Value#SkillValue.PerLevel#PerLevel", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int>("Dynamic")
                                        .HasColumnType("int");

                                    b2.Property<int>("Flat")
                                        .HasColumnType("int");
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("Resistance", "DndServer.Domain.Characters.Skill.SkillTemplate.Value#SkillValue.Resistance#Resistance", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int?>("Flat")
                                        .HasColumnType("int");

                                    b2.ComplexProperty<Dictionary<string, object>>("DamageType", "DndServer.Domain.Characters.Skill.SkillTemplate.Value#SkillValue.Resistance#Resistance.DamageType#DamageTypeEnum", b3 =>
                                        {
                                            b3.Property<int>("value__")
                                                .HasColumnType("int");
                                        });
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("TypeVision", "DndServer.Domain.Characters.Skill.SkillTemplate.Value#SkillValue.TypeVision#TypeVision", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("longtext");
                                });
                        });

                    b.HasKey("Id");

                    b.ToTable("SkillTemplate");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Spell.SpellInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<bool>("HasDamage")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MagicSchool")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("ActionTime", "DndServer.Domain.Characters.Spell.SpellInstance.ActionTime#ActionTime", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Concentrate")
                                .HasColumnType("tinyint(1)");

                            b1.Property<int>("Time")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Damage", "DndServer.Domain.Characters.Spell.SpellInstance.Damage#Damage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("DamageType")
                                .HasColumnType("int");

                            b1.Property<int>("Flat")
                                .HasColumnType("int");

                            b1.Property<bool>("Heal")
                                .HasColumnType("tinyint(1)");

                            b1.ComplexProperty<Dictionary<string, object>>("DamageRoll", "DndServer.Domain.Characters.Spell.SpellInstance.Damage#Damage.DamageRoll#DiceRolls", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int>("Dice")
                                        .HasColumnType("int");

                                    b2.Property<int>("Rolls")
                                        .HasColumnType("int");
                                });
                        });

                    b.HasKey("Id");

                    b.ToTable("SpellInstance");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Spell.SpellTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<bool>("HasDamage")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MagicSchool")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("System")
                        .HasColumnType("int");

                    b.Property<int?>("WorldId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("ActionTime", "DndServer.Domain.Characters.Spell.SpellTemplate.ActionTime#ActionTime", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Concentrate")
                                .HasColumnType("tinyint(1)");

                            b1.Property<int>("Time")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Damage", "DndServer.Domain.Characters.Spell.SpellTemplate.Damage#Damage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("DamageType")
                                .HasColumnType("int");

                            b1.Property<int>("Flat")
                                .HasColumnType("int");

                            b1.Property<bool>("Heal")
                                .HasColumnType("tinyint(1)");

                            b1.ComplexProperty<Dictionary<string, object>>("DamageRoll", "DndServer.Domain.Characters.Spell.SpellTemplate.Damage#Damage.DamageRoll#DiceRolls", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<int>("Dice")
                                        .HasColumnType("int");

                                    b2.Property<int>("Rolls")
                                        .HasColumnType("int");
                                });
                        });

                    b.HasKey("Id");

                    b.ToTable("SpellTemplate");
                });

            modelBuilder.Entity("DndServer.Domain.Shared.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("ImageByte")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("DndServer.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.Tracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Tracker");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.TrackerUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<double>("Initiative")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TrackerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackerId");

                    b.ToTable("TrackerUnit");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.Wiki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorldId");

                    b.ToTable("Wiki");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.WikiPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WikiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("WikiId");

                    b.ToTable("WikiPage");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.World", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TrackerKey")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("TrackerKey")
                        .IsUnique();

                    b.ToTable("World");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.WorldLinks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorldId");

                    b.ToTable("WorldLinks");
                });

            modelBuilder.Entity("ObjectInstanceSkillInstance", b =>
                {
                    b.Property<int>("ObjectInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("SkillInstanceId")
                        .HasColumnType("int");

                    b.HasKey("ObjectInstanceId", "SkillInstanceId");

                    b.HasIndex("SkillInstanceId");

                    b.ToTable("ObjectInstanceSkillInstance");
                });

            modelBuilder.Entity("ObjectTemplateSkillTemplate", b =>
                {
                    b.Property<int>("ObjectTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("SkillTemplateId")
                        .HasColumnType("int");

                    b.HasKey("ObjectTemplateId", "SkillTemplateId");

                    b.HasIndex("SkillTemplateId");

                    b.ToTable("ObjectTemplateSkillTemplate");
                });

            modelBuilder.Entity("RaceInstanceSkillInstance", b =>
                {
                    b.Property<int>("RaceInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("SkillInstanceId")
                        .HasColumnType("int");

                    b.HasKey("RaceInstanceId", "SkillInstanceId");

                    b.HasIndex("SkillInstanceId");

                    b.ToTable("RaceInstanceSkillInstance");
                });

            modelBuilder.Entity("RaceTemplateSkillTemplate", b =>
                {
                    b.Property<int>("RaceTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("SkillTemplateId")
                        .HasColumnType("int");

                    b.HasKey("RaceTemplateId", "SkillTemplateId");

                    b.HasIndex("SkillTemplateId");

                    b.ToTable("RaceTemplateSkillTemplate");
                });

            modelBuilder.Entity("SkillInstanceSpellInstance", b =>
                {
                    b.Property<int>("SkillInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("SpellInstanceId")
                        .HasColumnType("int");

                    b.HasKey("SkillInstanceId", "SpellInstanceId");

                    b.HasIndex("SpellInstanceId");

                    b.ToTable("SkillInstanceSpellInstance");
                });

            modelBuilder.Entity("SkillTemplateSpellTemplate", b =>
                {
                    b.Property<int>("SkillTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("SpellTemplateId")
                        .HasColumnType("int");

                    b.HasKey("SkillTemplateId", "SpellTemplateId");

                    b.HasIndex("SpellTemplateId");

                    b.ToTable("SkillTemplateSpellTemplate");
                });

            modelBuilder.Entity("BackgroundInstanceSkillInstance", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Background.BackgroundInstance", null)
                        .WithMany()
                        .HasForeignKey("BackgroundInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Skill.SkillInstance", null)
                        .WithMany()
                        .HasForeignKey("SkillInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackgroundTemplateSkillTemplate", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Background.BackgroundTemplate", null)
                        .WithMany()
                        .HasForeignKey("BackgroundTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Skill.SkillTemplate", null)
                        .WithMany()
                        .HasForeignKey("SkillTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterConditions", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Condition.Conditions", null)
                        .WithMany()
                        .HasForeignKey("ConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterNote", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Notes.Note", null)
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterObjectInstance", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Inventory.ObjectInstance", null)
                        .WithMany()
                        .HasForeignKey("ObjectInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSkillInstance", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Skill.SkillInstance", null)
                        .WithMany()
                        .HasForeignKey("SkillInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSpellInstance", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Spell.SpellInstance", null)
                        .WithMany()
                        .HasForeignKey("SpellInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassInstanceSkillInstance", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Class.ClassInstance", null)
                        .WithMany()
                        .HasForeignKey("ClassInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Skill.SkillInstance", null)
                        .WithMany()
                        .HasForeignKey("SkillInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassTemplateSkillTemplate", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Class.ClassTemplate", null)
                        .WithMany()
                        .HasForeignKey("ClassTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Skill.SkillTemplate", null)
                        .WithMany()
                        .HasForeignKey("SkillTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConditionsSkillTemplate", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Condition.Conditions", null)
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Skill.SkillTemplate", null)
                        .WithMany()
                        .HasForeignKey("SkillTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Character", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Background.BackgroundInstance", "BackgroundInstance")
                        .WithMany("Character")
                        .HasForeignKey("BackgroundInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Class.ClassInstance", "ClassInstance")
                        .WithMany("Character")
                        .HasForeignKey("ClassInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Shared.Image", "Image")
                        .WithMany("Character")
                        .HasForeignKey("ImageId");

                    b.HasOne("DndServer.Domain.Characters.Race.RaceInstance", "RaceInstance")
                        .WithMany("Character")
                        .HasForeignKey("RaceInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Users.User", "User")
                        .WithMany("Character")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackgroundInstance");

                    b.Navigation("ClassInstance");

                    b.Navigation("Image");

                    b.Navigation("RaceInstance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Inventory.ObjectInstance", b =>
                {
                    b.HasOne("DndServer.Domain.Shared.Image", "Image")
                        .WithMany("ObjectInstance")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Inventory.ObjectTemplate", b =>
                {
                    b.HasOne("DndServer.Domain.Shared.Image", "Image")
                        .WithMany("ObjectTemplate")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Notes.Note", b =>
                {
                    b.HasOne("DndServer.Domain.Shared.Image", "Image")
                        .WithMany("Note")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.TrackerUnit", b =>
                {
                    b.HasOne("DndServer.Domain.Worlds.Tracker", "Tracker")
                        .WithMany("TrackerUnits")
                        .HasForeignKey("TrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tracker");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.Wiki", b =>
                {
                    b.HasOne("DndServer.Domain.Worlds.World", "World")
                        .WithMany("Wiki")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("World");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.WikiPage", b =>
                {
                    b.HasOne("DndServer.Domain.Shared.Image", "Image")
                        .WithMany("WikiPage")
                        .HasForeignKey("ImageId");

                    b.HasOne("DndServer.Domain.Worlds.Wiki", "Wiki")
                        .WithMany("WikiPage")
                        .HasForeignKey("WikiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Wiki");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.World", b =>
                {
                    b.HasOne("DndServer.Domain.Shared.Image", "Image")
                        .WithMany("World")
                        .HasForeignKey("ImageId");

                    b.HasOne("DndServer.Domain.Worlds.Tracker", "Tracker")
                        .WithOne("World")
                        .HasForeignKey("DndServer.Domain.Worlds.World", "TrackerKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Tracker");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.WorldLinks", b =>
                {
                    b.HasOne("DndServer.Domain.Users.User", "User")
                        .WithMany("WorldLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Worlds.World", "World")
                        .WithMany("WorldLinks")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("World");
                });

            modelBuilder.Entity("ObjectInstanceSkillInstance", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Inventory.ObjectInstance", null)
                        .WithMany()
                        .HasForeignKey("ObjectInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Skill.SkillInstance", null)
                        .WithMany()
                        .HasForeignKey("SkillInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ObjectTemplateSkillTemplate", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Inventory.ObjectTemplate", null)
                        .WithMany()
                        .HasForeignKey("ObjectTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Skill.SkillTemplate", null)
                        .WithMany()
                        .HasForeignKey("SkillTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RaceInstanceSkillInstance", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Race.RaceInstance", null)
                        .WithMany()
                        .HasForeignKey("RaceInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Skill.SkillInstance", null)
                        .WithMany()
                        .HasForeignKey("SkillInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RaceTemplateSkillTemplate", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Race.RaceTemplate", null)
                        .WithMany()
                        .HasForeignKey("RaceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Skill.SkillTemplate", null)
                        .WithMany()
                        .HasForeignKey("SkillTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillInstanceSpellInstance", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Skill.SkillInstance", null)
                        .WithMany()
                        .HasForeignKey("SkillInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Spell.SpellInstance", null)
                        .WithMany()
                        .HasForeignKey("SpellInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillTemplateSpellTemplate", b =>
                {
                    b.HasOne("DndServer.Domain.Characters.Skill.SkillTemplate", null)
                        .WithMany()
                        .HasForeignKey("SkillTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndServer.Domain.Characters.Spell.SpellTemplate", null)
                        .WithMany()
                        .HasForeignKey("SpellTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Background.BackgroundInstance", b =>
                {
                    b.Navigation("Character");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Class.ClassInstance", b =>
                {
                    b.Navigation("Character");
                });

            modelBuilder.Entity("DndServer.Domain.Characters.Race.RaceInstance", b =>
                {
                    b.Navigation("Character");
                });

            modelBuilder.Entity("DndServer.Domain.Shared.Image", b =>
                {
                    b.Navigation("Character");

                    b.Navigation("Note");

                    b.Navigation("ObjectInstance");

                    b.Navigation("ObjectTemplate");

                    b.Navigation("WikiPage");

                    b.Navigation("World");
                });

            modelBuilder.Entity("DndServer.Domain.Users.User", b =>
                {
                    b.Navigation("Character");

                    b.Navigation("WorldLinks");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.Tracker", b =>
                {
                    b.Navigation("TrackerUnits");

                    b.Navigation("World")
                        .IsRequired();
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.Wiki", b =>
                {
                    b.Navigation("WikiPage");
                });

            modelBuilder.Entity("DndServer.Domain.Worlds.World", b =>
                {
                    b.Navigation("Wiki");

                    b.Navigation("WorldLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
